
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;


public class TestJSON {
	
	class Node
	{
		public int id;
		public ArrayList<Node> children = new ArrayList<Node>();
		public Node parent = null;
		
		public Node buildTree(String filename) throws IOException
		{
			Node [] nodes = new Node [2000];
			for(int i=0;i<nodes.length;i++)
			{
				nodes[i] = new Node();
				nodes[i].id = i-1;
			}
			Node root = new Node();
			
			BufferedReader br = new BufferedReader(new FileReader(filename));
			String line = "";
			while((line = br.readLine()) != null)
			{
				String [] fields = line.split(" ");
				int parent = Integer.parseInt(fields[0]) + 1;
				int child = Integer.parseInt(fields[1]) + 1;
				nodes[parent].children.add(nodes[child]);
				nodes[child].parent = nodes[parent]; 
			}			
			br.close();
			
			return nodes[0];
		}
		
		public int getTreeSize()
		{
			int sz = 1;
			for(int i=0;i<children.size();i++)
				sz += children.get(i).getTreeSize();
			return sz;
		}
		
		public void makePrediction(HashMap<Integer, Float> prediction, Set<Integer> labels, float threshold)
		{
			for(int i=0;i<children.size();i++)
			{
				int label = children.get(i).id;
				float v = prediction.get(label);
				if(v >= threshold)
				{
					labels.add(label);					
					children.get(i).makePrediction(prediction, labels, threshold);
				}
			}
		}
	}
	
	public String makeOutputStringHTML(Node root, int depth, TreeSet<Integer> labels, HashMap<Integer, String> id2name)
	{
		if(labels.contains(root.id))
		{
			//check if it is a leaf node
			boolean isLeaf = true;
			for(int i=0;i<root.children.size();i++)
			{
				if(labels.contains(root.children.get(i).id))
				{
					isLeaf = false;
					break;
				}
			}
			String ret = "";
			if(isLeaf)
			{
				ret += "<li>"+id2name.get(root.id)+"</li>";
			}
			else
			{
				ret += "<li>"+id2name.get(root.id);
				ret += "<ul>";
				//make children
				for(int i=0;i<root.children.size();i++)
					ret += makeOutputStringHTML(root.children.get(i), depth + 1, labels, id2name);
				ret += "</ul></li>";
			}
			
			return ret;
		}
		else
			return "";
	}
	
	public String makeOutputStringHJSON(Node root, int depth, TreeSet<Integer> labels, HashMap<Integer, String> id2name)
	{
		if(labels.contains(root.id))
		{
			//check if it is a leaf node
			boolean isLeaf = true;
			for(int i=0;i<root.children.size();i++)
			{
				if(labels.contains(root.children.get(i).id))
				{
					isLeaf = false;
					break;
				}
			}
			String ret = "";
			if(isLeaf)
			{
				ret += "{title:\""+id2name.get(root.id)+"\"},";
			}
			else
			{
				ret += "{title:\""+id2name.get(root.id)+"\", isFolder: true, key:\""+root.id+"\",children:[";				
				//make children
				for(int i=0;i<root.children.size();i++)
					ret += makeOutputStringHJSON(root.children.get(i), depth + 1, labels, id2name);
				ret += "]},";
			}
			
			return ret;
		}
		else
			return "";
	}
	
	public static void main(String [] args) throws IOException
	{
		TestJSON t = new TestJSON();
		Node tool = t.new Node();
		Node root = tool.buildTree("/media/DataVolume1/apache-solr-4.0.0/example/webapps/jsp/js_data/seeu_parent_child_hierarchy.txt");
		
		System.out.println(root.getTreeSize());
		
		String p = "0:0.84981,1:0.01872,2:0.00728,3:0.01715,4:0.00163,5:0.25468,6:0.00259,7:0.00016,8:0.00053,9:0.00539,10:0.00025,21:0.12442,22:0.99077,28:0.00196,29:0.00165,30:0.00119,31:0.00102,32:0.00133,33:0.00151,34:0.01079,35:0.00018,36:0.00107,38:0.00077,43:0.00014,46:0.04114,47:0.827,48:0.57672,66:0.00607,71:0.00392,73:0.09325,78:0.00019,89:0.00273,91:0.00582,95:0.00428,96:0.02068,97:0.10555,98:0.00468,99:0.54197,100:0.15815,101:0.01684,102:0.03061,103:0.01342,104:0.00939,105:0.57307,108:0.83245,109:0.90763,112:0.00488,113:0.00135,114:0.00409,122:0.00244,125:0.8747,126:0.00484,127:0.00161,128:0.00873,129:0.00219,130:0.00234,131:0.00491,132:0.92076,133:0.00035,134:0.00274,135:0.00235,137:0.00156,138:0.00454,143:0.01699,152:0.00855,157:0.01443,162:0.00162,164:0.04372,165:0.02364,167:0.17079,171:0.06887,172:0.16188,173:0.00178,174:0.07525,175:0.0043,176:0.00245,177:0.06468,178:0.00979,179:0.90479,183:0.00501,188:0.02102,191:0.00479,192:0.00757,193:0.51928,194:0.00347,195:0.09373,196:0.02094,197:0.00507,198:0.11434,200:0.04939,201:0.00265,203:0.04084,204:0.0036,224:0.01229,225:0.01305,237:0.0137,238:0.00475,239:0.00181,240:0.03394,245:0.00311,246:0.01407,247:0.00034,252:0.0049,253:0.12134,265:0.00313,266:0.01289,267:0.00661,268:0.16003,269:0.00143,270:0.00141,271:0.00069,272:0.00842,273:0.00495,280:0.0054,281:0.04524,282:0.46074,283:0.02157,284:0.03557,285:0.03396,287:0.92753,288:0.52372,290:0.00337,291:0.03356,292:0.00608,296:0.00838,297:0.00299,298:0.01245,299:0.00182,300:0.00072,301:0.94625,331:0.0056,332:0.00326,333:0.01333,336:0.00768,337:0.00509,341:0.00229,342:0.01135,343:0.7517,344:0.00334,345:0.02277,346:0.0167,347:0.12317,348:0.06311,349:0.04756,350:0.10401,351:0.15551,352:0.70569,356:0.03752,357:0.08984,358:0.03436,359:0.00329,360:0.00379,361:0.14986,362:0.85052,363:0.02964,364:0.99634,368:0.0027,369:0.0067,370:0.01146,372:0.0038,385:0.14399,386:0.15349,387:0.09332,389:0.08079,394:0.01969,395:0.19054,397:0.03658,401:0.00968,403:0.01657,404:0.01918,405:0.24267,406:0.29425,414:0.13753,415:0.09934,417:0.00173,418:0.39925,425:0.01615,426:0.02548,430:0.01638,431:0.0271,432:0.00965,433:0.06943,434:0.00068,435:0.06888,436:0.04858,437:0.00331,438:0.00074,439:0.0036,440:0.00762,441:0.00244,442:0.0017,443:0.00471,444:0.00328,456:0.01034,457:0.06902,458:0.02828,460:0.00585,461:0.05469,464:0.00478,465:0.03811,466:0.05015,467:0.00758,469:0.01466,470:0.0028,471:0.00695,472:0.1372,473:0.01638,474:0.82171,475:0.07794,476:0.00142,477:0.00928,478:0.03868,479:0.12539,480:0.14776,481:0.49473,482:0.07741,483:0.89992,484:0.03778,485:0.00877,486:0.02831,487:0.00526,488:0.00511,489:0.01238,491:0.00882,492:0.00534,493:0.00391,494:0.0013,495:0.00041,501:0.01805,502:0.00111,504:0.00273,505:0.00058,507:0.04715,508:0.02898,509:0.09809,510:0.00621,511:0.02153,512:0.00358,513:0.00871,516:0.00299,518:0.00877,521:0.01019,525:0.01111,526:0.00859,527:0.13995,528:0.10623,530:0.01025,532:0.00745,534:0.02481,537:0.00194,539:0.00932,540:0.01049,543:0.33671,544:0.7835,545:0.01314,546:0.00203,547:0.00622,548:0.01027,550:0.01688,551:0.00303,553:0.00339,554:0.01667,555:0.00234,556:0.00275,557:0.03565,561:0.02972,564:0.00451,565:0.00351,566:0.02238,569:0.09357,572:0.26441,573:0.01422,581:0.01586,588:0.00623,594:0.00067,595:0.03688,596:0.12687,597:0.01048,598:0.10559,599:0.05721,600:0.02488,601:0.05142,603:0.01309,604:0.01111,607:0.024,611:0.00576,613:0.06206,621:0.03826,625:0.00097,626:0.30252,628:0.04689,629:0.01884,633:0.07141,636:0.13876,638:0.03379,641:0.07054,648:0.0209,649:0.02482,650:0.45449,651:0.02106,670:0.17592,671:0.6455,691:0.00995,703:0.0119,708:0.01742,722:0.01386,726:0.03264,733:0.02877,734:0.0022,735:0.00426,736:0.45636,748:0.00306,751:0.05326,759:0.00492,761:0.00704,762:0.01594,763:0.02499,764:0.00458,765:0.0368,770:0.04022,773:0.00426,775:0.44925,783:0.03127,788:0.03098,789:0.03537,790:0.01142,799:0.00936,804:0.73717,815:0.00146,816:0.01622,817:0.00413,818:0.00011,819:0.00372,820:0.00291,821:0.00044,822:0.00253,839:0.02537,840:0.04098,841:0.01792,842:0.0486,843:0.00501,844:0.00057,845:0.00898,846:0.01029,847:0.05957,848:0.00663,849:0.00368,853:0.00558,854:0.02904,858:0.02176,860:0.01581,864:0.00152,867:0.00532,868:0.004,870:0.01012,874:0.00903,877:0.01143,878:0.00402,880:0.00158,883:0.00158,885:0.00521,887:0.01426,888:0.00155,891:0.00257,894:0.00181,895:0.02692,896:0.00186,897:0.06793,898:0.00151,902:0.04146,904:0.11583,906:0.0491,907:0.02825,908:0.0014,909:0.42794,910:0.03245,912:0.10807,914:0.02704,915:0.03975,916:0.07579,919:0.00626,920:0.16131,925:0.00926,926:0.01288,927:0.04144,928:0.00745,929:0.0158,931:0.0348,932:0.00217,933:0.00228,934:0.09651,938:0.02395,940:0.01535,941:0.00235,942:0.11966,943:0.00689,944:0.03465,945:0.0036,946:0.00518,947:0.00055,948:0.02717,950:0.00444,951:0.00703,952:0.0115,953:0.06886,954:0.00566,956:0.0139,958:0.08841,962:0.00097,963:0.04467,964:0.00101,965:0.00151,967:0.00746,968:0.00551,969:0.01607,972:0.00686,973:0.00945,977:0.00556,982:0.00591,987:0.00186,989:0.00384,991:0.00412,992:0.00473,998:0.01596,999:0.04614,1000:0.00262,1001:0.04451,1002:0.15949,1007:0.01315,1009:0.0098,1011:0.00519,1012:0.00409,1013:0.05395,1014:0.00985,1015:0.00313,1019:0.00123,1020:0.00151,1027:0.00369,1031:0.02465,1037:0.02477,1053:0.0028,1058:0.00985,1060:0.00158,1061:0.07996,1072:0.01683,1081:0.00708,1082:0.04169,1086:0.00619,1087:0.0047,1091:0.00412,1094:0.00828,1095:0.03634,1102:0.02527,1104:0.00365,1106:0.00077,1107:0.03413,1115:0.00578,1123:0.00652,1125:0.00113,1126:0.00238,1127:0.00249,1128:0.004,1129:0.00547,1130:0.00271,1131:0.0025,1134:0.06176,1136:0.00925,1138:0.00235,1145:0.07288,1159:0.00369,1162:0.0274,1163:0.01666,1164:0.00562,1165:0.00341,1166:0.01228,1167:0.01187,1168:0.01544,1170:0.00837,1171:0.01614,1178:0.4983,1179:0.01225,1180:0.00221,1181:0.33552,1182:0.03653,1187:0.10804,1194:0.51218,1209:0.0038,1210:0.00328,1211:0.03594,1216:0.19812,1219:0.01732,1224:0.02572,1226:0.01895,1227:0.00758";
		HashMap<Integer, Float> prediction = new HashMap<Integer, Float>();
		String [] ps = p.split(",");
		for(int i=0;i<ps.length;i++)
		{
			String [] vs = ps[i].split(":");
			int label = Integer.parseInt(vs[0]);
			float value = Float.parseFloat(vs[1]);
			prediction.put(label, value);
		}
		
		TreeSet<Integer> labels = new TreeSet<Integer>();
		root.makePrediction(prediction, labels, (float)0.1);
		Iterator<Integer> it = labels.iterator();
		while(it.hasNext())
		{
			int a = it.next();
			System.out.println(a);
		}
		
		//read id2name map
		HashMap<Integer, String> id2name = new HashMap<Integer, String>();
		BufferedReader br = new BufferedReader(new FileReader("/media/DataVolume1/apache-solr-4.0.0/example/webapps/jsp/js_data/topic_id2name.txt"));
		String line = "";
		while((line = br.readLine()) != null)
		{
			int pos = line.indexOf(' ');
			String id = line.substring(0, pos);
			String name = line.substring(pos+1);
			id2name.put(Integer.parseInt(id), name);
		}
		br.close();
		
		System.out.println("predicted tree");
		String ret = "[";
		for(int i=0;i<root.children.size();i++)
			ret += t.makeOutputStringHJSON(root.children.get(i), 0, labels, id2name);
		ret += "]";
		System.out.println(ret);
	}
}
